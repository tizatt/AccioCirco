var list=require('./index');
require('should');
function item(id)
{
	return {i:id};
}

function empty_list_check(l)
{
	(!l.head).should.be.ok;
	(!l.tail).should.be.ok;
	l.should.have.property('length',0);
	l.is_empty().should.be.ok;
}
function item_check(l,i)
{
	l.contains(i).should.be.true;
	if(i==l.head) (!l.prev(i)).should.be.ok;
	else l.next(l.prev(i)).should.eql(i);

	if(i==l.tail) (!l.next(i)).should.be.ok;
	else l.prev(l.next(i)).should.eql(i);

}
function list_check(l,items)
{
	l.should.have.property('length',items.length);
	if(!items.length)
		empty_list_check(l);
	var idx=0;
	l.each(function(i)
	{
		i.should.have.property('i',items[idx++]);
		item_check(l,i);
	})
}
function should_error(cb,err)
{
	try
	{
		cb();
		throw  new Error('should throw error:'+err);
	}catch(e)
	{
		if(e.message.indexOf(err)==-1)
			throw e;
	}
}
function new_list(prefix,base)
{
	var l=new list(prefix);
	if(!base)base=0;
	l.push(item(base+1),item(base+2),item(base+3),item(base+4));
	list_check(l,[base+1,base+2,base+3,base+4]);
	return l;
}
describe('list', function(){
	it('empty',function()
	{
		var l=new list();
		empty_list_check(l);
	});
	describe('add',function()
	{
		it('empty list add', function(){
		  	var l=new list();
		  	var o=item(1);
		  	l.add(o);
		    l.head.should.eql(o);
		    l.tail.should.eql(o);
		    l.should.have.property('length',1);
		    (!l.next(o)).should.be.ok;
		    (!l.prev(o)).should.be.ok;
		    l.contains(o).should.be.true;
		    item_check(l,o);
		    list_check(l,[1]);
		});	

		it('list add tail', function(){
		  	var l=new list();
		  	l.add(item(1));

		  	var o=item(2);
		  	l.add(o);
		    l.head.should.not.eql(o);
		    l.tail.should.eql(o);
		    l.should.have.property('length',2);
		    item_check(l,o);
		    list_check(l,[1,2]);
		});	
		it('list add head',function(){

			var l=new list();
		  	
		  	var ref=item(1);
		  	l.add(ref);

		  	var o=item(2);
		  	l.add(o,ref);
		    l.head.should.eql(o);
		    l.tail.should.not.eql(o);
		    l.should.have.property('length',2);
		    item_check(l,o);
		    list_check(l,[2,1])
		});
		it('list add normal',function(){
			var l=new list();
		  	
		  	var i1=item(1);
		  	l.add(i1);
			var i2=item(2);
		  	l.add(i2);

		  	var o=item(3);
		  	l.add(o,i2);
		    l.head.should.not.eql(o);
		    l.tail.should.not.eql(o);
		    l.should.have.property('length',3);
		    item_check(l,o);
		    list_check(l,[1,3,2]);
		});
		it('list add exists',function()
		{
			var l=new_list();
			should_error(
				function()
				{
					l.add(l.get(2));
				},
				'in list'
				);
			list_check(l,[1,2,3,4]);
		});
		it('list add not object',function()
		{
			var l=new_list();
			var a=[1,1.1,'111',null,undefined,false,true];
			for(var i=0;i<a.length;i++)
				should_error(function(){l.add(a[i]);},'require object');
			list_check(l,[1,2,3,4]);
		});
	});
	describe('index',function()
	{
		it('normal',function()
		{
			debugger;
			var l=new_list();
			for(var i=0;i<4;i++)
				l.get(i).should.have.property('i',i+1);
		});
		it('out of range',function()
		{
			var l=new_list();
			should_error(function()
			{
				l.get(-1);
			},'out of index range');
			should_error(function()
			{
				l.get(l.length);
			},'out of index range');
		});
	});

	describe('remove',function()
	{
		it('remove head',function()
		{
			var l=new_list();
			l.remove(l.head);
			list_check(l,[2,3,4]);
		});
		it('remove tail',function()
		{
			var l=new_list();
			l.remove(l.tail);
			list_check(l,[1,2,3]);
		});
		it('remove normal',function()
		{
			var l=new_list();
			l.remove(l.get(2));
			list_check(l,[1,2,4]);
		});
		it('clear',function()
		{
			var l=new_list();
			l.clear();
			list_check(l,[]);
		});
		it('remove not in list',function()
		{
			var l=new_list();
			should_error(
				function()
				{
					l.remove(item(5));
				},
				'not in list'
				);
			list_check(l,[1,2,3,4]);
		});
	});
	describe('mul list',function()
	{
		it('basic',function()
		{
			var l1=new_list('l1',0);
			var l2=new_list('l2',10);
			l1.each(function(i){l2.push(i);});

			list_check(l1,[1,2,3,4]);
			list_check(l2,[11,12,13,14,1,2,3,4]);

			for(var i=4;i<8;i++)
				item_check(l1,l2.get(i));
		});
	})
});
