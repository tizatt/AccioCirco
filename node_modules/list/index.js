function list(prefix)
{
	this.length=0;
	this.head=null;
	this.tail=null;
	if(!prefix)prefix='_l';
	this._next=prefix+'$n';
	this._prev=prefix+'$p';
	this._list=prefix+'$l';
}
list.prototype=
{
	is_empty:function(){return this.length==0;},
	contains:function(o)
	{
		return o[this._list]==this;
	},
	to_array:function()
	{
		var re=new Array(length);
		var idx=0;
		for(var i=this.head;i;i=i[this._next])
			re[idx++]=i;
		return re;
	},
	get:function(index)
	{
		if(index<0 || index>=this.length)
			throw new Error("out of index range");
		for(var i=this.head;i;i=i[this._next])
		{
			if(index)
				index--;
			else
				return i;
		}
	},
	add_head:function(o)
	{
		return this.add(o,this.head);
	},
	add_tail:function(o)
	{
		return this.add(o,null);
	},
	next:function(o)
	{
		if(o[this._list]!=this)
			throw new Error("object not in this list");
		return o[this._next];
	},
	prev:function(o)
	{
		if(o[this._list]!=this)
			throw new Error("object not in this list");
		return o[this._prev];
	},
	each:function(cb)
	{
		for(var i=this.head;i;i=i[this._next])
			if(cb(i)===false)
				return false;
		return true;
	},
	shift:function()
	{
		var a=arguments;
		var l=arguments.length;
		for(var i=0;i<l;i++)
			this.add(arguments[i],this.head);
	},
	unshift:function()
	{
		if(this.length)
		{
			var r=this.head;
			this.remove(r);
			return r;
		}
		return null;
	},
	pop:function()
	{
		if(this.length)
		{
			var r=this.tail;
			this.remove(r);
			return r;
		}
		return null;
	},
	push:function()
	{
		var a=arguments;
		var l=arguments.length;
		for(var i=0;i<l;i++)
			this.add(arguments[i]);
	},
	add:function(o,ref)
	{
		if(!(o instanceof Object))
			throw new Error("require object");
		if(o[this._next] || o[this._prev] || o[this._list])
			throw new Error("object is in list");

/*
n1 <--- n2
    --->
n1 <== o <== n2
	==> o ==> n2

n1 <--- n2
    --->
^

o<--- n1 <--- n2
  --->   --->
^

*/    
		
		if(this.length)
		{
			if(ref)
			{
				if(ref[this._list]!=this)
					throw new Error();

				o[this._next]=ref;
				if(ref==this.head)
				{
					o[this._prev]=null;
					this.head=o;
				}
				else
				{
					o[this._prev]=ref[this._prev];
					ref[this._prev][this._next]=o;
				}
				ref[this._prev]=o;

			}
			else
			{
				o[this._prev]=this.tail;
				this.tail[this._next]=o;
				this.tail=o;
				o[this._next]=null;
			}
			this.length++;
		}
		else
		{
			if(ref)
				throw new Error();
			this.head=this.tail=o;
			o[this._next]=o[this._prev]=null;
			this.length=1;
		}
		o[this._list]=this;
		return this;
	},
	remove:function(o)
	{
		if(o[this._list]!=this)
			throw new Error("object not in list");

		if(o==this.head) this.head=o[this._next];
		else o[this._prev][this._next]=o[this._next];
		

		if(o==this.tail) this.tail=o[this._prev];
		else o[this._next][this._prev]=o[this._prev];
		
		o[this._next]=null;
		o[this._prev]=null;
		o[this._list]=null;
		this.length--;
	},
	clear:function()
	{
		while(this.head)
			this.remove(this.head);
	}
};

module.exports=list;
